{
  "author": {
    "name": "smagch",
    "email": "smagch@gmail.com",
    "url": "https://github.com/smagch/"
  },
  "name": "jscat",
  "description": "cat cli by node",
  "version": "0.0.2",
  "keywords": [
    "cat",
    "concat",
    "cli",
    "command",
    "concatenate",
    "concatenation"
  ],
  "homepage": "https://github.com/smagch/js-cat",
  "repository": {
    "type": "git",
    "url": "git://github.com/smagch/js-cat.git"
  },
  "main": "index",
  "bin": {
    "jscat": "./bin/jscat"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/smagch/js-cat/master/LICENSE"
    }
  ],
  "dependencies": {
    "commander": "0.6.x",
    "async": "0.1.x",
    "mkdirp": "0.3.x"
  },
  "preferGlobal": true,
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">= 0.4.x < 0.7.0"
  },
  "readme": "# js-cat, cat CLI powered by nodejs.\n\njs-cat is easily customizable cat.\n\n## Install\n\ninstall with [npm](http://npmjs.org/)\n\n```\nnpm install -g jscat\n```\n\n## Usage\n\njscat works like unix cat.\n\n```\njscat *.js\n```\n\nfollowing two commands concatenate javascripts of current directory to `all.js`\n\n```\njscat *.js > all.js\n```\n\nor\n\n```\njscat *.js --out all.js\n```\n\n### Execute with Namespace\n\nassuming you have already installed `uglifyjs` globally, the next command will yield compressed javascripts.\n\n```\njscat -n compress *.js\n```\n\nif you don't installed uglify-js\n\n```\nnpm install -g uglify-js\n```\n\n### What's happening with namespace?\n\nJscat has three process, `read`, `each`, `join`.\nEach event has extension and namespace scope.\nThe following code is the default Event hook implementation.\n\n```\nvar exec = require('child_process').exec;\n\nexports['read.js:compress'] = function (srcPath, next) {\n  // balk if srcPath is like *min.js\n  if (/min\\.js$/.test(srcPath)) return next();\n  exec('uglifyjs ' + srcPath, next);\n};\n```\n\nFor more details, see next section.\n\n## Events\n\nAll event call is done asynchronously. You have to call callback rather than return value.\n\n### \"read\" (filePath, callback)\n\nread event is basically called once. But when callback is called with no arguments,\nnext matched event will be called.\n\nArguments\n\n* filePath {String}\n* callback {Function} (err, fileContent)\n\n### \"each\" (data, callback)\n\neach event is called recursively unless you set truthy value in third argument `stop`\nArguments\n\n* data {Object}\n* callback {Function} (err, fileContent, stop)\n\n```\ndata = {\n  path: {String}\n  content: {Buffer}\n};\n```\n\n### \"join\" (dataArray, callback)\n\nArguments\n\n* files {Array}\n* callback {Function} (err, fileContent)\n\n```\ndataArray = [\n  {\n    path: {String},\n    content: {Buffer}\n  },\n  {\n    path: {String},\n    content: {Buffer}\n  }\n  ...\n];\n```\n### Events Extension\n\nSimply, file extension is applied. \n\n* `read.js` will listen javascript's read event.\n* `each.css` will listen css's each event.\n* `join.html` will listen html's join event.\n\nunlike `read` and `each`, `join`'s extension is only available when you set `--out, -o`.\nSee Note section for details.\n\n### Events Namespace \n\nYou can define your own event namespace. Make sure namespace should be followed by extension.\n\n* `read.js:production` : this is legal. \n* `read:production.js` : this is illegal.\n\n### Order of priority\n\n1. [key][.ext][:namespace]\n2. [key][.ext][:namespace]\n3. [key][:namespace]\n4. [key]\n\n\n## Example\n\nThe following events hook is do nothing especially.\n\n```\nexports['read'] = function (srcPath, next) {\n  // Balk hook event with no argument.\n  next();\n};\n\n// make sure you return `data.content`, not `data`\nexports['each'] = function (data, callback, stop) {\n  callback(null, data.content);\n};\n\n// You cannot balk join event\nexports['join'] = function (dataArray, next) {\n  var files = dataArray.map(function (data) {\n    return data.content;\n  });\n  next(null, files.join('\\n'));\n};\n```\n\nYou may want to implement your own event hook. \n\n```\n\nexports['each.js:compress'] = function (data, callback) {\n  var jsp = require(\"uglify-js\").parser;\n  var pro = require(\"uglify-js\").uglify;\n  // your own uglify implementation\n  callback(null, content);\n};\n\n```\n\n## Command-line API\n\n`jscat --help` to see help\n\n```\n\nUsage: jscat [options] [dir|file|namespace ...]\n\nOptions:\n\n  -h, --help                   output usage information\n  -V, --version                output the version number\n  -h, --hook <path>            specify event hook source path\n  -o, --out <path>             excute writeFile to path\n  -n, --namespace <namespace>  add namespace\n  -N, --no-src                 excute with no hook including default hook\n  -v, --verbose                verbose logging\n\n\n```\n\n## Notes\n\n### Difference between shell redirection and `-o, --out`\n\nYou cannot listen join's extension event when you use redirection.\nLet's say you define join event hooks like following.\n\n```javascript\n\nexports['join.js'] = function (dataArray, next) {\n  var files = dataArray.map(function (data) {\n    return data.content;\n  });\n  next(null, 'This is custom join \\n' + files.join(';\\n\\n\\n'));\n};\n\nexports['join'] = function (dataArray, next) {\n  var files = dataArray.map(function (data) {\n    return data.content;\n  });\n  next(null, 'yet another custom join' + files.join('\\n\\n\\n\\n=============\\n\\n\\n\\n'));\n};\n\n```\n\nThe first hook won't be called. Instead, the second hook will be called.\n\n```\njscat foo.js bar.js\njscat foo.js bar.js > all.js\n```\n\nThe first hook will be called when you specify `--out` or `-o`.\n\n```\njscat foo.js bar.js --out all.js\n```\n\n\n### Avoid `console.log`\n\nuse `console.error` when you log your config. Otherwise you'll end up with a hilarious situation.\n\n```javascript\nexports['each.js'] = function (data, next) {\n  console.log('I am debbuging!!');\n  // do some work\n  var content = ...;\n  next(null, content);\n};\n```\n\n```\njscat ./src/*.js > ./my-lib-built.js\n\ncat my-lib-built.js\n~\nI an debugging!!\n~\n```\n\n\n## Contribute\n\nImplementation is quite simple with [async](https://github.com/caolan/async) and [commander](https://github.com/visionmedia/commander.js). Feel free to do pull request or suggestion.\n\n\n### syntax\n\nTo test code syntax, make sure you install [jshint](https://github.com/jshint/node-jshint) globally.\n```\nnpm install -g jshint\n```\n\n```\nmake jshint\n```\n\n### test\n\nTODO\n\n## TODO\n\n* example\n* middleware\n* test script\n* multi namespace: how to do syntax??\n\n## License\n\n(The MIT License)\n\nCopyright (C) 2012 Shimaguchi Tomoya\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/smagch/js-cat/issues"
  },
  "_id": "jscat@0.0.2",
  "dist": {
    "shasum": "5707c148afabbabe793c782c9abf446faa8ad4c3"
  },
  "_from": "jscat@",
  "_resolved": "https://registry.npmjs.org/jscat/-/jscat-0.0.2.tgz"
}
