{
  "name": "cheerio-soupselect",
  "version": "0.1.1",
  "engines": {
    "node": ">=0.2.0"
  },
  "author": {
    "name": "Matt Mueller",
    "email": "mattmuelle@gmail.com"
  },
  "url": "http://github.com/harryf/node-soupselect",
  "dependencies": {
    "htmlparser2": "2.x"
  },
  "contributors": [
    {
      "name": "Siddharth Mahendraker",
      "email": "siddharth_mahen@me.com"
    }
  ],
  "devDependencies": {
    "mocha": "0.x"
  },
  "repository": [
    {
      "type": "git",
      "url": "git://github.com/harryf/node-soupselect.git"
    }
  ],
  "main": "./lib/soupselect",
  "scripts": {
    "test": "mocha -u tdd -R list"
  },
  "license": "MIT",
  "description": "Adds CSS selector support to htmlparser for scraping activities - port of soupselect (python)",
  "readme": "# cheerio-soupselect\n\nA fork of harryf's [node-soupselect]\n(http://github.com/harryf/node-soupselect),\nwhich is originally a port of Simon Willison's\n[soupselect](http://code.google.com/p/soupselect/)\nfor use with node.js and node-htmlparser.\n\n## Installation\n\n    $ npm install cheerio-soupselect\n\n## Testing\n\nFrom the root folder:\n\n    $ make test\n\n## Features\n\n### Selectors\n\ncheerio-soupselect supports all of the most common jQuery\nselectors, including multiple attribute selectors and\nmultiple selectors.\n\n### Filters\n\nsoupselect also supports a bunch of basic filters, listed below.\nEach filter is implement according to the jQuery specification.\n\n* contains\n* empty\n* parent\n* has\n* header\n* not\n* eq\n* gt\n* lt\n* even\n* odd\n* first\n* last\n\n### Filter Extensions\n\ncheerio-soupselect supports custom filters through the\nexported `filters` object. It's simple:\n\n    var soupselect = require(\"cheerio-soupselect\"),\n        filters = soupselect.filters;\n    ...\n    filters[\"custom-filter\"] = function(ctx, val){\n        console.log(\"Hello filters!\");\n        return [];\n    };\n    ...\n    var ret = soupselect.select(dom, \":custom-filter('awesome arg')\");\n\nThe `ctx` parameter provides an array of `htmlparser2`\nDOMs, which are themselves arrays. These element are\ngrouped by parent.\n\nThe `val` parameter provides access to everything inside\nthe brackets of the filter, if anything.\n\nA few notes about custom selectors:\n\n* Your custom function **must** return an array.\n\n* For the most part, you will not need to handle\nnesting filters/selectors. However, if you wish\nto modify the nested selector then, you may do\nso by modifiying `val`.\n\n",
  "readmeFilename": "README.md",
  "_id": "cheerio-soupselect@0.1.1",
  "dist": {
    "shasum": "4c70e508a28f41edc85e8f3e87fe927afb1954bd"
  },
  "_from": "cheerio-soupselect@*",
  "_resolved": "https://registry.npmjs.org/cheerio-soupselect/-/cheerio-soupselect-0.1.1.tgz"
}
