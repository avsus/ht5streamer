//load modules
var ytdl = require('ytdl');
var youtube = require('youtube-feeds');
var http = require('http');

// module vars
var current_search_page=1;
var current_start_index = 1;
var videos_responses = new Array();
var yt = {};


// search videos

yt.searchVideos = function (user_search, page, cb){
    if (page === 1){
        current_start_index = 1;
    } else {
        current_start_index = page * 25 + 1;    
    }
    try{
        youtube.feeds.videos({
                q:              ''+user_search+'',
                'start-index' : ''+current_start_index+'',
                'max-results':  25,
                orderby:        'relevance'
            },
            function( err, data ) {
            if( err ) {
                cb(err);
            } else {
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

yt.getVideoInfos = function (video_link,num,total,cb){
    var video = {};
    video.num = num;
    video.total = total;
    video.link = video_link;
    video.cb = cb;
    try {
        ytdl.getInfo(video.link, video, function(err, video, info){
            if(err) {
                console.log(err);
            } else {
                video.id = info.video_id;
                video.title = info.title;
                video.views = info.view_count;
                video.thumb =  info.thumbnail_url;
                video.author = info.author;
                video.duration = info.length_seconds;
                var num=info.formats.length;
                if ( parseInt(num) === 0) {
                        return;
                }
                var resolutions = {};
                var res = [];
                for(var i=0; i<num; i++) {
                    var resolution = info.formats[i].resolution;
                    var container = info.formats[i].container;
                    if ( in_array(resolution,res) === true || container == 'flv' || container == '3gp' ) {
                        continue;
                    }
                    res.push(resolution);
                    resolutions[resolution] = [];
                    resolutions[resolution]['link'] = info.formats[i].url;
                    resolutions[resolution]['container'] = container;
                    //video['resolutions.container'] = container;
                }
                video.resolutions = resolutions;
                storeVideosInfos(video);
            }
        });
        } catch(err) {
            console.log('getVideoInfos err: '+ err);
        }
}

//playlists
yt.searchPlaylists = function(user_search, page,cb){
    if (page === 1){
        current_start_index = 1;
    } else {
        current_start_index = page * 25 + 1;    
    }
    try {
        videos_responses = new Array();
        youtube.feeds.playlistSearch({
            q:              ''+user_search+'',
            'start-index' : ''+current_start_index+'',
            'max-results':  25,
            orderby:        'relevance'
            },
        function( err, data ) {
        if( err ) {
           cb(err);
        } else {
            cb(data);
        }
    });
    } catch(err) {
        console.log('searchPlaylists err: '+err);
    }   
}

yt.loadSongs = function(plid,length,index,cb){
    try{
        youtube.feeds.playlist(''+plid+'',{
                'start-index' : ''+index+'',
                'max-results':  25
            },
            function( err, data ) {
            if( err ) {
                cb( err );
            } else {
                cb(data, length, plid, 'youtube');
            }
        });
    } catch(err) {
        console.log('loadSongs err: '+err);
    }
}

// store videos and return it in the right order...
function storeVideosInfos(video) {
    videos_responses[video.num]=video;
    if (videos_responses.length == video.total) {
        video.cb(videos_responses);
        videos_responses= new Array();
    }
}

// functions
function in_array (needle, haystack, argStrict) {
  var key = '',
    strict = !! argStrict;

  if (strict) {
    for (key in haystack) {
      if (haystack[key] === needle) {
        return true;
      }
    }
  } else {
    for (key in haystack) {
      if (haystack[key] == needle) {
        return true;
      }
    }
  }

  return false;
}

module.exports = yt;
